{"version":3,"sources":["webpack:///./src/views/SolidRestTest.vue?4475","webpack:///src/views/SolidRestTest.vue","webpack:///./src/views/SolidRestTest.vue?5e78","webpack:///./src/views/SolidRestTest.vue","webpack:///./src/models/Thing.js","webpack:///./src/models/Vcard.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","_v","_s","result","on","create","read","staticClass","directives","name","rawName","value","expression","attrs","domProps","$event","target","composing","message","post","_l","todo","key","id","$pouch","put","$set","remove","staticRenderFns","console","log","rest","show","msg","runRest","data","base","file","text","contacts_path","pouch","todos","methods","computed","contacts","storage","component","Thing","jsonld","owl","as","schema","options","default_options","Vcard","Object","assign"],"mappings":"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","file":"js/solidresttest.12f1045a.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-container',[_c('h3',[_vm._v(\"Solid Rest Test\")]),_vm._v(\" result : \"+_vm._s(_vm.result)+\" \"),_c('b-button',{on:{\"click\":_vm.create}},[_vm._v(\"Create\")]),_c('b-button',{on:{\"click\":_vm.read}},[_vm._v(\"Read\")]),_c('hr'),_c('div',{staticClass:\"todos\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.message),expression:\"message\"}],attrs:{\"placeholder\":\"New Todo\"},domProps:{\"value\":(_vm.message)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.message=$event.target.value}}}),_c('button',{on:{\"click\":function($event){_vm.post({message: _vm.message},{},'todos');_vm.message=''}}},[_vm._v(\"Save Todo\")]),_vm._l((_vm.todos),function(todo){return _c('div',{key:todo.id},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(todo.message),expression:\"todo.message\"}],domProps:{\"value\":(todo.message)},on:{\"change\":function($event){return _vm.$pouch.put(todo,{},'todos')},\"input\":function($event){if($event.target.composing){ return; }_vm.$set(todo, \"message\", $event.target.value)}}}),_vm._v(\" vcard:name \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(todo['vcard:hasName']),expression:\"todo['vcard:hasName']\"}],domProps:{\"value\":(todo['vcard:hasName'])},on:{\"change\":function($event){return _vm.$pouch.put(todo,{},'todos')},\"input\":function($event){if($event.target.composing){ return; }_vm.$set(todo, 'vcard:hasName', $event.target.value)}}}),_c('button',{on:{\"click\":function($event){return _vm.$pouch.remove(todo,{},'todos')}}},[_vm._v(\"Remove\")])])})],2)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <b-container>\r\n    <h3>Solid Rest Test</h3>\r\n    result : {{ result}}\r\n\r\n    <b-button @click=\"create\">Create</b-button>\r\n    <b-button @click=\"read\">Read</b-button>\r\n\r\n    <hr>\r\n    <div class=\"todos\">\r\n      <input v-model=\"message\" placeholder=\"New Todo\">\r\n      <button @click=\"post({message: message},{},'todos');message=''\">Save Todo</button>\r\n      <div v-for=\"todo in todos\" :key='todo.id'>\r\n        <input v-model=\"todo.message\" @change=\"$pouch.put(todo,{},'todos')\">\r\n        vcard:name     <input v-model=\"todo['vcard:hasName']\" @change=\"$pouch.put(todo,{},'todos')\">\r\n        <button @click=\"$pouch.remove(todo,{},'todos')\">Remove</button>\r\n      </div>\r\n    </div>\r\n  </b-container>\r\n</template>\r\n\r\n<script>\r\n/*global SolidRest, SolidBrowserFS*/\r\n/*eslint no-undef: \"error\"*/\r\n//import $ from 'jquery'\r\n\r\n\r\nconst rest = new SolidRest([new SolidBrowserFS()])\r\nconsole.log(rest)\r\nconst base = \"app://bfs/IndexedDB\"\r\nconst file = base + \"/test-file.ttl\"\r\nconst text = \"<> a <#test>.\"\r\nrunRest( file, text )\r\n\r\nasync function runRest(file,text){\r\n  console.log('init')\r\n  let response = await rest.fetch( file,{method:\"PUT\",body:text} )\r\n  response = await rest.fetch( file )\r\n  if(response.status==200 && await response.text()==text) show(\"OK!\")\r\n  else show(\"FAIL!\")\r\n}\r\n\r\nfunction show(msg){\r\n  // let display = document.getElementById(\"results\")\r\n  // display.innerHTML = display.innerHTML + `<p>${msg}</p>`\r\n  console.log( `<p>${msg}</p>`  )\r\n}\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n//import $ from 'jquery'\r\nimport auth from 'solid-auth-client';\r\nimport FC from 'solid-file-client'\r\nconst fc = new FC( auth )\r\n\r\nimport { mapState } from 'vuex';\r\nimport Vcard from '@/models/Vcard.js'\r\n\r\nexport default {\r\n  name: 'SolidRestTest',\r\n\r\n  data() {\r\n    return {\r\n      base : \"app://bfs/IndexedDB\",\r\n      file : this.base + \"/test-file.ttl\",\r\n      text : \"<> a <#test>.\",\r\n      result: \"must change\",\r\n      contacts_path : \"\",\r\n      message:\"\"\r\n    };\r\n  },\r\n  pouch: {\r\n    // The simplest usage. queries all documents from the \"todos\" pouch database and assigns them to the \"todos\" vue property.\r\n    todos: {/*empty selector*/}\r\n  },\r\n  async created(){\r\n\r\n    console.log(\"databases\",this.$databases)\r\n    let todos =  await this.$pouch.allDocs({/*OPTIONAL options*/}, 'todos')\r\n    console.log(\"todos\",todos)\r\n\r\n    await this.PUT(file, this.text)\r\n    let res =  await this.GET(file)\r\n    let text = await res.text()\r\n    console.log(text)\r\n    this.result = text\r\n    //  this.contacts_path_idb = this.base+'/contacts/'\r\n    //let app = this\r\n\r\n    this.contacts_path = this.storage+'contacts/'\r\n\r\n    this.$pouch.syncToAnything = async (docs) => {\r\n      // Sync function receives a document batch\r\n      // Should return a promise\r\n      console.log(\"docs\",docs)\r\n      // Example:\r\n      // return $.ajax({\r\n      //   url: 'https://spoggy-test9.solidcommunity.net/couchdb/',\r\n      //   data: JSON.stringify(docs),\r\n      //   method: 'POST'\r\n      // })\r\n      let contact = {}\r\n      contact['@id'] = uuidv4()+'.json'\r\n      contact['schema:dateCreated'] = new Date().toISOString()\r\n      contact.message = docs.message\r\n      console.log(contact)\r\n      console.log(contact, this.contacts_path+contact['@id'])\r\n      let res = await fc.createFile(this.contacts_path+contact['@id'], JSON.stringify(contact), \"application/json\")\r\n      console.log(res)\r\n      return   res //await this.PUT(this.contacts_path+contact['@id'], JSON.stringify(contact), \"application/json\")\r\n    }, {\r\n      sync_id: 'talkingToMyRestAPI',\r\n      batch_size: 10\r\n    }\r\n\r\n\r\n    console.log(this.$pouch)\r\n\r\n\r\n\r\n    //https://docs.couchdb.org/en/stable/replication/protocol.html\r\n    //  PouchDB.plugin(PouchdbSyncToAnything)\r\n\r\n    //  var myDb = new PouchDB('exampleDB')\r\n\r\n\r\n    //let path = 'https://spoggy-test9.solidcommunity.net/couchdb/'\r\n    // let head = await this.HEAD(path)\r\n    // console.log(\"CouchDB_HEAD\",head)\r\n    // create database\r\n    //this.$pouch.put(path)\r\n    // Send all documents to the remote database, and stream changes in real-time. Note if you use filters you need to set them correctly for pouchdb and couchdb. You can set them for each direction separatly: options.push/options.pull. PouchDB might not need the same filter to push documents as couchdb to send the filtered requested documents.\r\n    // this.$pouch.sync('todos', 'http://localhost:5984/todos', options);\r\n    //  this.$pouch.sync('todos', path, {headers:{\"Accept\": 'application/json', 'Content-Type': 'application/json'}} );\r\n\r\n\r\n    // console.log(this.$pouch)\r\n    // //let docs = this.todos\r\n    //     this.$pouch.syncToAnything(function (docs) {\r\n    //       // Sync function receives a document batch\r\n    //       // Should return a promise\r\n    //\r\n    //       // Example:\r\n    //       return $.ajax({\r\n    //         url: 'https://spoggy-test9.solidcommunity.net/couchdb/',\r\n    //         data: JSON.stringify(docs),\r\n    //         method: 'POST'\r\n    //       })\r\n    //     }, {\r\n    //       sync_id: 'talkingToMyRestAPI',\r\n    //       batch_size: 10\r\n    //     })\r\n\r\n\r\n  },\r\n  methods: {\r\n    async post(message, empty, base){\r\n      //{message: message},{},'todos'\r\n      //  let pouch = this.$pouch\r\n\r\n      let vcard = new Vcard()\r\n      let path = this.storage+'contacts/'\r\n      //  console.log('add',path, contact)\r\n\r\n      vcard['@id'] == null ? vcard['@id'] = path+uuidv4()+'.jsonld' :''\r\n      vcard['vcard:hasName'] = message.message\r\n      console.log(\"vcard\",vcard)\r\n      // const resultArray = arr.map(elm => ({ Name: elm.id, Data: elm.name}));\r\n\r\n      // rename prop jslonld : @id , pouch : _id https://medium.com/front-end-weekly/immutably-rename-object-keys-in-javascript-5f6353c7b6dd\r\n      let pouch_card = Object.assign({}, vcard);\r\n      pouch_card._id = pouch_card['@id']\r\n      console.log('pouch_card', pouch_card)\r\n\r\n      vcard.save({option_test: \"bla\", base: 'contacts'})\r\n\r\n\r\n\r\n      this.$pouch.put(pouch_card, empty, base)\r\n\r\n      let result = this.$pouch.syncToAnything(message)\r\n      console.log(\"RESULT\",result)\r\n      // .then(function(){\r\n      //   return pouch.changes({\r\n      //     since: 0,\r\n      //     include_docs: true\r\n      //   }).then(function (changes) {\r\n      //     console.log(changes)\r\n      //   }).catch(function (err) {\r\n      //     // handle errors\r\n      //     console.log(err)\r\n      //   });\r\n      // })\r\n    },\r\n    async create(){\r\n      let contact = {}\r\n      contact['@id'] = uuidv4()+'.jsonld'\r\n      contact['schema:dateCreated'] = new Date().toISOString()\r\n      console.log(contact, this.contacts_path+contact['@id'])\r\n      let res = await this.PUT(this.contacts_path+contact['@id'], JSON.stringify(contact), \"application/json\")\r\n      console.log(res)\r\n    },\r\n    async read(){\r\n      let res = await this.GET(this.contacts_path)\r\n      console.log(res)\r\n      // console.log(this.contacts_path)\r\n      // await fc.readFolder(this.contacts_path).then(async function(folder){\r\n      //   console.log('folder',folder)\r\n      // })\r\n    },\r\n\r\n    async test1(){\r\n      let data = `<> a <#test>. \\n\r\n      <> dct:dateCreated \"${new Date()}\" .`\r\n\r\n      await this.PUT(file, data)\r\n      let res =  await this.GET(file)\r\n      let text = await res.text()\r\n      console.log(text)\r\n      this.result = text\r\n    },\r\n    // /* =========================================================== */\r\n    // /* REST METHODS                                                */\r\n    // /* =========================================================== */\r\n    async GET(url){\r\n      return await rest.fetch( url, {method:\"GET\", headers:{\"Accept\": 'application/json'}} )\r\n    },\r\n    async HEAD(url){\r\n      return await rest.fetch( url, {method:\"HEAD\"} )\r\n    },\r\n    //     HEAD /source HTTP/1.1\r\n    // Host: localhost:5984\r\n    // User-Agent: CouchDB\r\n    async PUT(url,text,content_type = \"text/turtle\"){\r\n      console.log(\"text\",text)\r\n      return await rest.fetch( url, {method:\"PUT\",body:text,headers:{\"content-type\":content_type}} )\r\n    },\r\n    async DELETE(url){\r\n      return await rest.fetch( url, {method:\"DELETE\"} )\r\n    },\r\n    async POST(parent,item,content,link){\r\n      return await rest.fetch( parent,{\r\n        method:\"POST\",\r\n        headers:{slug:item,link:link,\"content-type\":\"text/turtle\"},\r\n        body:content\r\n      })\r\n    },\r\n    async postFile(parent,file,content){\r\n      let link = '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"'\r\n      return this.POST(parent,file,content,link)\r\n    },\r\n    async postFolder(parent,folder){\r\n      let link ='<http://www.w3.org/ns/ldp#BasicContainer>; rel=\"type\"'\r\n      return this.POST(parent,folder,'',link)\r\n    }\r\n  },\r\n  computed: mapState({\r\n    contacts: s =>  s.contacts.contacts,\r\n    storage: s => s.solid.storage\r\n  }),\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SolidRestTest.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SolidRestTest.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./SolidRestTest.vue?vue&type=template&id=27bbda56&\"\nimport script from \"./SolidRestTest.vue?vue&type=script&lang=js&\"\nexport * from \"./SolidRestTest.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\r\nexport default class Thing {\r\n  constructor() {\r\n    this.jsonld = {\r\n      '@context': {\r\n        owl: \"http://www.w3.org/2002/07/owl#\",\r\n        as: \"https://www.w3.org/ns/activitystreams\",\r\n        schema: \"http://schema.org/\"\r\n      },\r\n      '@id': null,\r\n      '@type': \"owl:Thing\",\r\n      'schema:name': \"__NEW__THING__\"\r\n    }\r\n  }\r\n\r\n  save(options = {}){\r\n    console.log(\"save\",this,  options)\r\n  }\r\n}\r\n","import Thing from './Thing.js'\r\n//import VCardContext from '@/models/Vcard.jsonld.js'\r\n\r\n\r\nlet default_options = {\r\n  '@id': null,\r\n  'vcard:hasName': \"\",\r\n  '@type': \"vcard:VCard\",\r\n  'vcard:given-name': \"\",\r\n  'vcard:family-name': \"\",\r\n  'vcard:hasPhoto': 'https://image.flaticon.com/icons/svg/149/149992.svg'\r\n\r\n}\r\n//https://raw.githubusercontent.com/lanthaler/vCardOntology/master/Vcard.jsonld\r\n\r\nexport default class Vcard extends Thing {\r\n  constructor(options = default_options) {\r\n    super()\r\n    // assign context\r\n  //  Object.assign(this.jsonld['@context'], VCardContext)\r\n    // default\r\n\r\n\r\n    // assign options\r\n    Object.assign(this, options)\r\n\r\n    //this.jsonld['@type'] = \"vcard:VCard\",\r\n    //this.jsonld['vcard:hasName'] = \"__NEW__vcard:Name__\"\r\n\r\n\r\n    // this.basic_fields = [\r\n    //   this.picture = 'https://image.flaticon.com/icons/svg/149/149992.svg',\r\n    //   this.name = '',\r\n    //   this.birth = '',\r\n    //   this.email = '',\r\n    //   this.phone = '',\r\n    //   this.nationality = '',\r\n    // ]\r\n\r\n    //   this['@context'] = {\r\n    //     as: \"https://www.w3.org/ns/activitystreams\",\r\n    //     schema: \"http://schema.org/\"\r\n    //   },\r\n    //   this['@id'] = null\r\n    //   this['@type'] = \"Vcard\"\r\n    //   this['schema:name'] = \"__NEW__VCARD__\"\r\n  }\r\n}\r\n"],"sourceRoot":""}